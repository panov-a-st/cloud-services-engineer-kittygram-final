name: Kittygram Main workflow

on:
  push:
    branches:
      - main

jobs:
  run_tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
    - name: Run Python tests
      run: python -m flake8 --ignore=F401,E501,W291,W292,E301,W293,E123,I001,I004 backend/

  images-build-push:
    name: Build&Push Docker images
    needs: run_tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push backend image to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_LOGIN }}/kittygram_backend:latest

      - name: Push frontend image to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_LOGIN }}/kittygram_frontend:latest

      - name: Push gateway image to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: ${{ secrets.DOCKER_LOGIN }}/kittygram_gateway:latest

      - name: Create .env file on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_LOGIN }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            mkdir -p /home/${{ secrets.SERVER_LOGIN }}/kittygram
            cat <<EOF > /home/${{ secrets.SERVER_LOGIN }}/kittygram/.env
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            EOF

  deploy:
    needs:
      - run_tests
      - images-build-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Store docker-compose yml file
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_LOGIN }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "docker-compose.production.yml"
          target: "/home/${{ secrets.SERVER_LOGIN }}/kittygram"
      - name: Deploy
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_LOGIN }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            cd /home/${{ secrets.SERVER_LOGIN }}/kittygram
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --noinput
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
      - name: Set the correct domain in tests.yml
        run: |
          sed -i "s|kittygram_domain:.*|kittygram_domain: http://${{ secrets.SERVER_HOST }}:80|" tests.yml

  auto_tests:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install -r backend/requirements.txt
      - name: Run Pytest
        run: |
          pytest

  telegram-notify:
    runs-on: ubuntu-latest
    needs: auto_tests
    steps:
      - name: Send success message
        uses: appleboy/telegram-action@master
        if: success()
        with:
          to: ${{ secrets.TG_TO }}
          token: ${{ secrets.TG_TOKEN }}
          message: |
            The project has been built and deployed successfully.            
            Commit ${{ github.sha }} to ${{ github.repository }} by ${{ github.actor }}.
      - name: Send error message
        uses: appleboy/telegram-action@master
        if: failure()
        with:
          to: ${{ secrets.TG_TO }}
          token: ${{ secrets.TG_TOKEN }}
          message: |
            There was an error building the project           
